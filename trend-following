"""
Long entries are only allowed if the 50-day moving average is above the 100-day moving average.
Short entries are only allowed if the 50-day moving average is below the 100-day moving average.

If today’s closing price is the highest close in the past 50 days, we buy.
If today’s closing price is the lowest close in the past 50 days, we sell.

Position sizing is volatility adjusted according to the ATR-based formula previously shown, with a
risk factor of 20 basis points.
A long position is closed when it has moved three ATR units down from its highest closing price
since the position was opened.
A short position is closed when it has moved three ATR units up from its lowest closing price since
the position was opened.
The investment universe consists of five sectors with 10 markets in each.
•
"""

import pandas as pd
import numpy as np
from pandas_datareader import data
import matplotlib.pyplot as plt

df = pd.read_excel('FX_GBPJPY.xlsx')
df = df.head(200)


def turtle(df, window_size, arc):
    signals = pd.DataFrame(index=df.index)
    signals['orders'] = 0
    # window_size-days high
    signals['high'] = df['close'].shift(1).rolling(window=window_size).max()
    # window_size-days low
    signals['low'] = df['close'].shift(1).rolling(window=window_size).min()
    signals['long_entry'] = 0.0
    signals['long_exit'] = ''
    signals['short_entry'] = 0.0
    signals['short_exit'] = ''
    signals['position'] = 0
    signals['stop_loss'] = 0.0
    for i in range(1, len(signals)):
        if df["close"][i-1] >= signals["high"][i-1] and df["ma50"][i-1] > df["ma200"][i-1] and signals['position'][i-1] == 0:
            signals['position'][i] = 1
            ind = i
            long_entry = signals["long_entry"][i] = df["open"][i]
            stop_loss = signals['stop_loss'][i] = long_entry - arc * df["ATR"][i-1]
            if stop_loss >= df["low"][i]:
                result = stop_loss - long_entry
                signals['position'][i] = 0
            else:                
                for j in range(i+1, len(df)):
                    stop_loss = max(stop_loss, max(df["close"][ind:j]) - arc * df["ATR"][j-1])
                    if stop_loss >= df["low"][j]:
                        signals["long_exit"] = "long_exit"
                        signals['position'][j] = 0
                        result = stop_loss - long_entry
                        break
                    else:
                        signals['stop_loss'][j] = stop_loss
                        signals['position'][j] = 1
                
        elif df["close"][i-1] <= signals["low"][i-1] and df["ma50"][i-1] < df["ma200"][i-1] and signals['position'][i-1] == 0:
            signals['position'][i] = -1
            ind = i          
            short_entry = signals["short_entry"][i] = df["open"][i]
            stop_loss = signals['stop_loss'][i] = df["close"][i-1] + arc * df["ATR"][i-1]
            if stop_loss <= df['high'][i]:
                result = short_entry - stop_loss
                signals['position'][i] = 0
            else:               
                for j in range(i+1, len(df)):
                    stop_loss = min(stop_loss, min(df["close"][ind:j]) + arc * df["ATR"][j-1])
                    if stop_loss <= df["high"][j]:
                        signals["short_exit"] = "short_exit"
                        signals['position'][j] = 0
                        result = short_entry - stop_loss
                        break
                    else:
                        signals['stop_loss'][j] = stop_loss
                        signals['position'][j] = -1
    return signals

ts = turtle(df, 50, 3)            
ts.to_excel("ts2.xlsx")            
